#!/usr/bin/env php
<?php
// bin/check-emails.php

chdir(dirname(__DIR__));
require_once 'vendor/autoload.php';

use App\Core\Database;
use Dompdf\Dompdf;
use Dompdf\Options;
use Microsoft\Graph\Graph;
use Microsoft\Graph\Model;
use TheNetworg\OAuth2\Client\Provider\Azure;
use WebSocket\Client as WebSocketClient;

// --- VOS INFORMATIONS À CONFIGURER ---
$tenantId = ''; //ID DU TENANT
$clientId = ''; // Votre ID d'application
$clientSecret = ''; //TOKEN SECRET
$userEmailToRead = ''; // La boîte mail à lire
// ------------------------------------

echo "Début du script de vérification des e-mails via Microsoft Graph...\n";

// --- Authentification OAuth ---
$provider = new Azure([
    'clientId'          => $clientId,
    'clientSecret'      => $clientSecret,
    'tenant'            => $tenantId,
]);

$provider->scope = 'https://graph.microsoft.com/.default';

try {
    $accessToken = $provider->getAccessToken('client_credentials');
    echo "Jeton d'accès obtenu avec succès.\n";
} catch (\League\OAuth2\Client\Provider\Exception\IdentityProviderException $e) {
    die("Erreur OAuth : " . $e->getMessage());
}

// --- Utilisation de l'API Microsoft Graph ---
$graph = new Graph();
$graph->setAccessToken($accessToken->getToken());

echo "Tentative de lecture des e-mails non lus pour " . $userEmailToRead . "...\n";

try {
    // Requête pour obtenir les messages non lus de la boîte de réception, en incluant les pièces jointes
    $messagesRequest = $graph->createRequest('GET', '/users/' . $userEmailToRead . '/mailFolders/inbox/messages?$filter=isRead eq false&$expand=attachments')
                              ->setReturnType(Model\Message::class);

    $messages = $messagesRequest->execute();

    echo "Appel à l'API Graph réussi. " . count($messages) . " message(s) non lu(s) trouvé(s).\n";

    if (empty($messages)) {
        echo "Aucun nouvel e-mail à traiter.\n";
        exit; // Termine le script proprement
    }

    foreach ($messages as $message) {
        echo "Traitement du message : '" . $message->getSubject() . "' (ID Graph: " . $message->getId() . ")\n";
        $parentDocumentId = null;

        // --- 1. Sauvegarder le corps de l'e-mail en PDF ---
        if ($message->getBody() && $message->getBody()->getContentType()->value() === 'html') {
            $emailBodyHtml = $message->getBody()->getContent();
            
            $options = new Options();
            $options->set('isHtml5ParserEnabled', true);
            $dompdf = new Dompdf($options);
            $dompdf->loadHtml($emailBodyHtml);
            $dompdf->setPaper('A4', 'portrait');
            $dompdf->render();
            $pdfOutput = $dompdf->output();

            $emailSubject = $message->getSubject() ?: 'Email sans sujet';
            $storedPdfFilename = 'email_' . uniqid('', true) . '.pdf';
            $fullPdfPath = dirname(__DIR__) . '/storage/' . $storedPdfFilename;
            file_put_contents($fullPdfPath, $pdfOutput);

            $pdo = Database::getInstance();
            $sql = "INSERT INTO documents (original_filename, stored_filename, storage_path, mime_type, size, status, created_at, updated_at) 
                    VALUES (?, ?, ?, 'application/pdf', ?, 'received', NOW(), NOW())";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([
                $emailSubject . '.pdf', $storedPdfFilename, 'storage/', strlen($pdfOutput)
            ]);
            $parentDocumentId = $pdo->lastInsertId();
            echo "   -> Corps de l'e-mail sauvegardé en PDF (ID BDD: $parentDocumentId).\n";
            notifyWebSocket($emailSubject . '.pdf');
        }

        // --- 2. Traiter les pièces jointes ---
        if ($message->getHasAttachments()) {
            $attachments = $message->getAttachments();
            foreach ($attachments as $attachment) {
                echo "   -> Pièce jointe trouvée : " . $attachment->getName() . "\n";
                
                $originalFilename = $attachment->getName();
                $storedFilename = 'doc_' . uniqid('', true) . '.' . pathinfo($originalFilename, PATHINFO_EXTENSION);
                $fullStoragePath = dirname(__DIR__) . '/storage/' . $storedFilename;

                file_put_contents($fullStoragePath, base64_decode($attachment->getContentBytes()));
                
                $pdo = Database::getInstance();
                $sql = "INSERT INTO documents (original_filename, stored_filename, storage_path, mime_type, size, status, parent_document_id, created_at, updated_at) 
                        VALUES (?, ?, ?, ?, ?, 'received', ?, NOW(), NOW())";
                $stmt = $pdo->prepare($sql);
                $stmt->execute([
                    $originalFilename, $storedFilename, 'storage/', $attachment->getContentType(), $attachment->getSize(), $parentDocumentId
                ]);
                
                $attachmentId = $pdo->lastInsertId();
                echo "   -> Pièce jointe importée (ID BDD: $attachmentId) et liée à l'e-mail (ID BDD: $parentDocumentId).\n";

                printAndTrackDocument($pdo, $attachmentId, $fullStoragePath);
                notifyWebSocket($originalFilename);
            }
        }

        // --- 3. Marquer le message comme lu ---
        $graph->createRequest('PATCH', '/users/' . $userEmailToRead . '/messages/' . $message->getId())
              ->attachBody(['isRead' => true])
              ->execute();
        echo "   -> Message marqué comme lu sur le serveur.\n";
    }

} catch (\Microsoft\Graph\Exception\GraphException $e) {
    $errorBody = $e->getResponse()->getBody()->getContents();
    $errorDetails = json_decode($errorBody, true);
    
    echo "\n--- ERREUR API GRAPH ---\n";
    echo "Code: " . $e->getCode() . "\n";
    echo "Message: " . $e->getMessage() . "\n";
    if (isset($errorDetails['error']['message'])) {
        echo "Détail de l'erreur Azure: " . $errorDetails['error']['message'] . "\n";
    }
    echo "------------------------\n";
    die();
} catch (Exception $e) {
    die("Erreur générale : " . $e->getMessage());
}

function printAndTrackDocument(PDO $pdo, int $docId, string $filePath): void
{
    $printerName = 'GedPrinter';
    echo "   -> Envoi du document $docId à l'imprimante $printerName...\n";

    $command = "sudo lp -d " . escapeshellarg($printerName) . " " . escapeshellarg($filePath);
    $output = shell_exec($command . " 2>&1");

    preg_match('/request id is\s(.*?)\s/', $output, $matches);
    
    if (isset($matches[1])) {
        $jobId = $matches[1];
        $updateStmt = $pdo->prepare("UPDATE documents SET print_job_id = ?, status = 'to_print' WHERE id = ?");
        $updateStmt->execute([$jobId, $docId]);
        echo "   -> Succès. Job ID : $jobId. Statut mis à jour à 'to_print'.\n";
    } else {
        echo "   -> ERREUR lors de l'envoi à l'imprimante : $output\n";
        error_log("Erreur d'impression CUPS pour document ID $docId : " . $output);
    }
}

function notifyWebSocket(string $filename): void 
{
    try {
        $client = new WebSocketClient("ws://127.0.0.1:8082");
        $payload = json_encode(['action' => 'new_document', 'filename' => $filename, 'timestamp' => date('Y-m-d H:i:s')]);
        $client->send($payload);
        $client->close();
        echo "   -> Notification WebSocket envoyée.\n";
    } catch (\Exception $e) {
        error_log("CRON - Erreur WebSocket : " . $e->getMessage());
    }
}
